---
version: '3'
vars:
  CLUSTER_NAME: bootstrap
  ARGO_WORKFLOWS_NS: argo
  ARGO_WORKFLOWS_VER: 3.4.3
  ARGO_CD_NS: argocd
  ARGO_CD_VER: 2.5.2
  ARGO_ROLLOUTS_NS: argo-rollouts
  ARGO_ROLLOUTS_VER: 1.3.0
  GITEA_NS: gitea
  GITEA_NAME: gitea
  GITEA_CHART_REPO_NAME: gitea-charts
  GITEA_CHART_REPO_URL: https://dl.gitea.io/charts/
  GITEA_CHART: gitea
  GITEA_CHART_VER: 6.0.3
  HASHICORP_VAULT_NS: vault
  HASHICORP_VAULT_NAME: vault
  HASHICORP_CHART_REPO_NAME: hashicorp
  HASHICORP_CHART_REPO_URL: https://helm.releases.hashicorp.com
  HASHICORP_VAULT_CHART: vault
  HASHICORP_VAULT_CHART_VER: 0.22.1

tasks:
#  ssh-agent:
#    cmds:
#      - eval $(ssh-agent)
#    status:
#      - ssh-add -l
#  ssh-keygen-overwrite:
#    cmds:
#      - ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/bootstrap
#    generates:
#      - ~/.ssh/bootstrap.*
  ansible-galaxy-install:
    sources:
      - requirements.yml
    cmds:
      - ansible-galaxy install -f -r requirements.yml
    generates:
      - .ansible-roles/**/*.yml
  ansible-playbook-localhost:
    deps:
      - ansible-galaxy-install
    cmds:
      - ansible-playbook --limit localhost --tag k8s-from-docker --tag k8s-gitops playbook.yml
      - echo done >> .onetime
    sources:
      - playbook.yml
    generates:
      - .onetime
  k3d-up:
    deps:
      - ansible-playbook-localhost
    cmds:
      - sudo k3d cluster create bootstrap --k3s-arg "--disable=traefik@server:0"
    status:
      - sudo k3d cluster list {{ .CLUSTER_NAME }}
  k3d-delete:
    cmds:
      - sudo k3d cluster delete {{ .CLUSTER_NAME }}
  istio-install:
    deps:
      - k3d-up
    cmds:
      - sudo istioctl install -y
    status:
      - sudo istioctl verify-install
  istio-uninstall:
    deps:
      - delete
    cmds:
      - sudo istioctl uninstall --purge --force -y
  kubeshark-tap-all:
    deps:
      - istio-install
    cmds:
      - sudo kubeshark tap -A --service-mesh
  kubectl-ns-apply:
    deps:
      - istio-install
    vars:
      n: '{{ default "my-project" .n }}'
      f: '{{ default "https://github.com/me/myproject/releases/download/v1.0.0/install.yaml" .f }}'
    cmds:
      - |
        sudo kubectl create namespace {{ .n }};
        # enable istio sidecar injection on all namespaces
        sudo kubectl label namespace {{ .n }} istio-injection=enabled --overwrite
        sudo kubectl \
          apply \
          -n {{ .n }} \
          -f {{ .f }}
    status:
      - sudo kubectl get namespace {{ .n }}
  kubectl-ns-delete:
    vars:
      n: '{{ default "my-project" .n }}'
      f: '{{ default "https://github.com/me/myproject/releases/download/v1.0.0/install.yaml" .f }}'
    cmds:
      - |
        ns_count=$(sudo kubectl get ns -o json | jq -r '[.items | .[] | select(.metadata.name=={{ .n | quote }})] | length')
        if [ "$ns_count" != "0" ];
        then
          sudo kubectl \
            delete \
            -n {{ .n }} \
            -f {{ .f }};
          sudo kubectl \
            delete \
            namespace {{ .n }};
        fi
  argo-cd-apply:
    cmds:
      - task: kubectl-ns-apply
        vars:
          n: '{{ .ARGO_CD_NS }}'
          f: https://raw.githubusercontent.com/argoproj/argo-cd/v{{ .ARGO_CD_VER }}/manifests/install.yaml
  argo-cd-delete:
    cmds:
      - task: kubectl-ns-delete
        vars:
          n: '{{ .ARGO_CD_NS }}'
          f: https://raw.githubusercontent.com/argoproj/argo-cd/v{{ .ARGO_CD_VER }}/manifests/install.yaml
  argo-workflows-apply:
    cmds:
      - task: kubectl-ns-apply
        vars:
          n: '{{ .ARGO_WORKFLOWS_NS }}'
          f: https://github.com/argoproj/argo-workflows/releases/download/v{{ .ARGO_WORKFLOWS_VER }}/install.yaml
  argo-workflows-delete:
    cmds:
      - task: kubectl-ns-delete
        vars:
          n: '{{ .ARGO_WORKFLOWS_NS }}'
          f: https://github.com/argoproj/argo-workflows/releases/download/v{{ .ARGO_WORKFLOWS_VER }}/install.yaml
  argo-rollouts-apply:
    cmds:
      - task: kubectl-ns-apply
        vars:
          n: '{{ .ARGO_ROLLOUTS_NS }}'
          f: https://github.com/argoproj/argo-rollouts/releases/download/v{{ .ARGO_ROLLOUTS_VER }}/install.yaml
  argo-rollouts-delete:
    cmds:
      - task: kubectl-ns-delete
        vars:
          n: '{{ .ARGO_ROLLOUTS_NS }}'
          f: https://github.com/argoproj/argo-rollouts/releases/download/v{{ .ARGO_ROLLOUTS_VER }}/install.yaml
  apply:
    - task: argo-cd-apply
    - task: argo-workflows-apply
    - task: argo-rollouts-apply
  delete:
    - task: argo-cd-delete
    - task: argo-workflows-delete
    - task: argo-rollouts-delete
  helm-repo-add:
    vars:
      CHART_REPO_NAME: '{{ default "my-charts" .CHART_REPO_NAME }}'
      CHART_REPO_URL: '{{ default "https://my-chart-museum/charts/" .CHART_REPO_URL }}'
    cmds:
      - sudo helm repo add {{ .CHART_REPO_NAME }} {{ .CHART_REPO_URL }}
    status:
      - sudo helm repo list -o json | jq -e '.[] | select(.name=={{ .CHART_REPO_NAME | quote }})'
  gitea-helm-repo-add:
    cmds:
      - task: helm-repo-add
        vars:
          CHART_REPO_NAME: '{{ .GITEA_CHART_REPO_NAME }}'
          CHART_REPO_URL: '{{ .GITEA_CHART_REPO_URL }}'
  helm-install:
    vars:
      NAMESPACE: '{{ default "helm-install-namespace" .NAMESPACE }}'
      NAME: '{{ default "helm-release-name" .NAME }}'
      CHART_REPO_NAME: '{{ default "helm-chart-repo-nae" .CHART_REPO_NAME }}'
      CHART: '{{ default "helm-chart" .CHART }}'
      CHART_VER: '{{ default "helm-version-constraint" .CHART_VER }}'
    cmds:
      - sudo helm install --create-namespace -n {{ .NAMESPACE }} {{ .NAME }} {{ .CHART_REPO_NAME }}/{{ .CHART }} --version {{ .CHART_VER }}
    status:
      - sudo helm list -n {{ .NAMESPACE }} -o json | jq -e '.[] | select(.name=={{ .NAME | quote }})'
  gitea-helm-install:
    deps:
      - gitea-helm-repo-add
    cmds:
      - task: helm-install
        vars:
          NAMESPACE: '{{ .GITEA_NS }}'
          NAME: '{{ .GITEA_NAME }}'
          CHART_REPO_NAME: '{{ .GITEA_CHART_REPO_NAME }}'
          CHART: '{{ .GITEA_CHART }}'
          CHART_VER: '{{ .GITEA_CHART_VER }}'
  helm-delete:
    vars:
      NAMESPACE: '{{ default "helm-install-namespace" .NAMESPACE }}'
      NAME: '{{ default "helm-release-name" .NAME }}'
    cmds:
      - |
        release_count=$(sudo helm list -n {{ .NAMESPACE }} -o json | jq -r '[.[] | select(.name=={{ .NAME | quote }})] | length');
        if [ "${release_count}" != "0" ];
        then
          sudo helm delete -n {{ .NAMESPACE }} {{ .NAME }}
        fi;
  gitea-helm-delete:
    cmds:
      - task: helm-delete
        vars:
          NAMESPACE: '{{ .GITEA_NS }}'
          NAME: '{{ .GITEA_NAME }}'
  hashicorp-helm-repo-add:
    cmds:
      - task: helm-repo-add
        vars:
          CHART_REPO_NAME: '{{ .HASHICORP_CHART_REPO_NAME }}'
          CHART_REPO_URL: '{{ .HASHICORP_CHART_REPO_URL }}'
  hashicorp-vault-helm-install:
    cmds:
      - task: helm-install
        vars:
          NAMESPACE: '{{ .HASHICORP_VAULT_NS }}'
          NAME: '{{ .HASHICORP_VAULT_NAME }}'
          CHART_REPO_NAME: '{{ .HASHICORP_CHART_REPO_NAME }}'
          CHART: '{{ .HASHICORP_VAULT_CHART }}'
          CHART_VER: '{{ .HASHICORP_VAULT_CHART_VER }}'
  hashicorp-vault-helm-delete:
    cmds:
      - task: helm-delete
        vars:
          NAMESPACE: '{{ .HASHICORP_VAULT_NS }}'
          NAME: '{{ .HASHICORP_VAULT_NAME }}'
  chart-repos-add:
    deps:
      - gitea-helm-repo-add
      - hashicorp-helm-repo-add
  charts-install:
    deps:
      - gitea-helm-install
  charts-delete:
    deps:
      - gitea-helm-delete
